{"version":3,"sources":["components/comments/Comments.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/comments/NewCommentForm.module.css","components/quotes/HighlightedQuote.module.css","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/NewCommentForm.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"names":["module","exports","CommentItem","props","className","classes","item","text","CommentsList","comments","map","comment","id","NewCommentForm","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","quoteId","form","onSubmit","LoadingSpinner","control","htmlFor","rows","ref","actions","Comments","useState","isAddingComment","setIsAddingComment","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","onClick","HighlightedQuote","quote","author","QuoteDetail","getSingleQuote","loadedQuote","match","useRouteMatch","path","exact","to","url"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,SAAW,2B,qBCA7BD,EAAOC,QAAU,CAAC,KAAO,0B,qBCAzBD,EAAOC,QAAU,CAAC,SAAW,+B,qBCA7BD,EAAOC,QAAU,CAAC,KAAO,6BAA6B,QAAU,gCAAgC,QAAU,gCAAgC,QAAU,gC,qBCApJD,EAAOC,QAAU,CAAC,MAAQ,gC,2ICSXC,EARK,SAACC,GACnB,OACE,oBAAIC,UAAWC,IAAQC,KAAvB,SACE,4BAAIH,EAAMI,QAGf,E,iBCKcC,EAVM,SAACL,GACpB,OACE,oBAAIC,UAAWC,IAAQI,SAAvB,SACGN,EAAMM,SAASC,KAAI,SAACC,GAAD,OAClB,cAAC,EAAD,CAA8BJ,KAAMI,EAAQJ,MAA1BI,EAAQC,GADR,KAKzB,E,iBCuCcC,EA5CQ,SAAAV,GACrB,IAAMW,EAAiBC,mBAIvB,EAAuCC,YAAQC,KAAvCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAAQC,EAA7B,EAA6BA,MAErBC,EAAmBlB,EAAnBkB,eAERC,qBAAU,WACO,cAAXH,GAA2BC,GAC7BC,GAEH,GAAE,CAACF,EAAQC,EAAOC,IAEnB,IAAME,EAAoB,SAAAC,GACxBA,EAAMC,iBAEN,IAAMC,EAAcZ,EAAea,QAAQC,MAK3CV,EAAY,CAAEW,YAAa,CAAEtB,KAAMmB,GAAeI,QAAS3B,EAAM2B,SAClE,EAED,OACE,uBAAM1B,UAAWC,IAAQ0B,KAAMC,SAAUT,EAAzC,UACc,YAAXJ,GACC,qBAAKf,UAAU,WAAf,SACE,cAAC6B,EAAA,EAAD,MAGJ,sBAAK7B,UAAWC,IAAQ6B,QAASF,SAAUT,EAA3C,UACE,uBAAOY,QAAQ,UAAf,0BACA,0BAAUvB,GAAG,UAAUwB,KAAK,IAAIC,IAAKvB,OAEvC,qBAAKV,UAAWC,IAAQiC,QAAxB,SACE,wBAAQlC,UAAU,MAAlB,6BAIP,ECyBcmC,EA/DE,WACf,MAA8CC,oBAAS,GAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KAEQZ,EADOa,cACPb,QAOR,EAAsDd,YAAQ4B,KAAtD1B,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAAc0B,EAAnC,EAA6BC,KAE7BxB,qBAAU,WACRJ,EAAYY,EACb,GAAE,CAACA,EAASZ,IAEb,IAOIT,EAPEsC,EAAsBC,uBAAY,WACtC9B,EAAYY,EACb,GAAE,CAACZ,EAAaY,IA0BjB,MAnBe,YAAXX,IACFV,EACE,qBAAKL,UAAU,WAAf,SACE,cAAC6B,EAAA,EAAD,OAKS,cAAXd,GAA0B0B,GAAkBA,EAAeI,OAAS,IACtExC,EAAW,cAAC,EAAD,CAAcA,SAAUoC,KAIxB,cAAX1B,GACE0B,GAA4C,IAA1BA,EAAeI,SAEnCxC,EAAW,mBAAGL,UAAU,WAAb,0CAIX,0BAASA,UAAWC,IAAQI,SAA5B,UACE,gDACEgC,GACA,wBAAQrC,UAAU,MAAM8C,QA3CC,WAC7BR,GAAmB,EACpB,EAyCK,2BAIDD,GACC,cAAC,EAAD,CACEX,QAASA,EACTT,eAAgB0B,IAGnBtC,IAGN,E,iBC5Dc0C,EATU,SAAChD,GACxB,OACE,yBAAQC,UAAWC,IAAQ+C,MAA3B,UACE,4BAAIjD,EAAMI,OACV,qCAAaJ,EAAMkD,WAGxB,EC0DcC,UAtDK,WAElB,MAKItC,YAAQuC,KAAgB,GAJ1BrC,EADF,EACEA,YACAC,EAFF,EAEEA,OACMqC,EAHR,EAGEV,KACA1B,EAJF,EAIEA,MAGIqC,EAAQC,cAKN5B,EAHOa,cAGPb,QAMR,OALAR,qBAAU,WACRJ,EAAYY,EACb,GAAE,CAACZ,EAAaY,IAGF,YAAXX,EAEA,qBAAKf,UAAU,WAAf,SACE,cAAC6B,EAAA,EAAD,MAKFb,EACK,mBAAGhB,UAAU,WAAb,SAAyBgB,IAE7BoC,EAAYjD,KAKf,eAAC,WAAD,WACE,cAAC,EAAD,CAAkBA,KAAMiD,EAAYjD,KAAM8C,OAAQG,EAAYH,SAC9D,cAAC,IAAD,CAAOM,KAAMF,EAAME,KAAMC,OAAK,EAA9B,SACE,qBAAKxD,UAAU,WAAf,SACE,cAAC,IAAD,CAAMA,UAAU,YAAYyD,GAAE,UAAKJ,EAAMK,IAAX,aAA9B,+BAOJ,cAAC,IAAD,CAAOH,KAAI,UAAKF,EAAME,KAAX,aAAX,SACE,cAAC,EAAD,SAhBG,8CAoBV,C","file":"static/js/3.3ff01fd4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__iZX-v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__24mbD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__valp0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__2Te8b\",\"loading\":\"NewCommentForm_loading__2veC2\",\"control\":\"NewCommentForm_control__3NVeP\",\"actions\":\"NewCommentForm_actions__2fwWP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__nE9T6\"};","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useRef, useEffect } from 'react';\nimport useHttp from '../../hooks/use-http';\nimport { addComment } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './NewCommentForm.module.css';\n\nconst NewCommentForm = props => {\n  const commentTextRef = useRef();\n\n\n\n  const { sendRequest, status, error } = useHttp(addComment);\n\n  const { onAddedComment } = props;\n\n  useEffect(() => {\n    if (status === 'completed' && !error) {\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment]);\n\n  const submitFormHandler = event => {\n    event.preventDefault();\n\n    const enteredText = commentTextRef.current.value;\n\n    // optional: Could validate here\n\n    // send comment to server\n    sendRequest({ commentData: { text: enteredText }, quoteId: props.quoteId });\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === 'pending' && (\n        <div className=\"centered\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import { useCallback, useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport useHttp from '../../hooks/use-http';\nimport { getAllComments } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\n\nimport classes from './Comments.module.css';\nimport CommentsList from './CommentsList';\nimport NewCommentForm from './NewCommentForm';\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n  const { quoteId } = params;\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  \n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [quoteId, sendRequest]);\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]); // I should wrap this function with useCallback and provide empty dependencies array\n  // because addedCommentHandler is passed to the NewCommentForm and there I used that prop as a dependency for useEffect\n  // if I dont use useCallback, this function will be recreated whenever the parent component re-renders\n  // and that could create an infinite loop here which I wanna avoid\n\n  let comments;\n\n  if (status === 'pending') {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (status === 'completed' && loadedComments && loadedComments.length > 0) {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n\n  if (\n    status === 'completed' &&\n    (!loadedComments || loadedComments.length === 0)\n  ) {\n    comments = <p className=\"centered\">No comments were added yet!</p>;\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          quoteId={quoteId}\n          onAddedComment={addedCommentHandler}\n        />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { Fragment, useEffect } from 'react';\nimport { Route, useParams, Link } from 'react-router-dom';\nimport Comments from '../components/comments/Comments';\nimport HighlightedQuote from '../components/quotes/HighlightedQuote';\nimport useHttp from '../hooks/use-http';\nimport { getSingleQuote } from '../lib/api';\n\n\nimport { useRouteMatch } from 'react-router-dom';\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\n// it's kind of similar to useLocation but it has more information about the currently loaded Route\n// Not just about URL but about some internally managed data React Router is aware of\n\nconst QuoteDetail = () => {\n  // fetching from firebase\n  const {\n    sendRequest,\n    status,\n    data: loadedQuote,\n    error,\n  } = useHttp(getSingleQuote, true);\n\n  const match = useRouteMatch();\n\n  const params = useParams();\n\n\n  const { quoteId } = params;\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]); // and that's why I'm using object destructuring here\n  // because in other way I would need to add whole params object here\n\n  if (status === 'pending') {\n    return (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (error) {\n    return <p className=\"centered\">{error}</p>;\n  }\n  if (!loadedQuote.text) {\n    return <p>No quote found</p>;\n  }\n\n  return (\n    <Fragment>\n      <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\n      <Route path={match.path} exact>\n        <div className=\"centered\">\n          <Link className=\"btn--flat\" to={`${match.url}/comments`}>\n            Load Comments\n          </Link>\n        </div>\n      </Route>\n      {/* <Route path={`/quotes/${params.quoteId}/comments`}> --- instead of this \n     use this with match.object (path includes our placeholder -- /:quoteId): */}\n      <Route path={`${match.path}/comments`}>\n        <Comments />\n      </Route>\n    </Fragment>\n  );\n};\n\nexport default QuoteDetail;\n"],"sourceRoot":""}